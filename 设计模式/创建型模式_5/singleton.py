
"""
单例模式
内容:保证一个类只有一个实例,并提供一个访问它的全局访问点。
角色
    单例( Singleton)
优点
    对唯一实例的受控访
    单例相当于全局变量,但防止了命名空间被污染 ，不会在其它地方命名同一个名字时会冲突
python 本身模块是单例的了
创建型模式(5种): エ厂方法模式、抽象工厂模式、创建者模式、原型模式、单例模式
结构型模式(7种): 适配器模式、桥模式、组合模式、装饰模式、外观模式、享元模式、代理模式
行为型模式(11种): 解释器模式、责任链模式、命令模式、迭代器模式、中介者模式、备忘录模式、观察者模式、状态模式、策略模式、访向者模式、模板方法模式
抽象工厂模式和建造者模式相比于简单工厂模式和工厂方法模式而言更灵活也更复杂。
通常情况下、设计以简单工厂模式或工厂方法模式开始,当你发现设计需要更大的灵活性时,则像更复杂的设计模式演化

"""
class Singleton:
    #面向对象的时候，在yimide之前，用来分配空间，初始化，不是给某个属性赋值的那种初始化，是给整个对象的初始化
    def __new__(cls, *args, **kwargs):
        #如果类用这个属性类，说明它已经有实例了，没有则创建实例
        if not hasattr(cls,"_instance"):
            cls._instance=super(Singleton,cls).__new__(cls)
        return cls._instance

class MyClass(Singleton):
    def __init__(self,a):
        self.a=a

a=MyClass(10)
b=MyClass(20) #覆盖之前的实例

print(a.a)
print(b.a)
print(id(a),id(b)) #查看实例
#日志对象就是单例，不能多个实例操作同一个文件 会冲突
#数据库连接池的连接器也要弄成单例，开两个连接浪费资源
#写一个操作系统，文件系统也是单例，一个类实现一个功能
